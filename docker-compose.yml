version: '3.1'
volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  logs:
  storage:

#   ***************** mosquitto MQTT broker *********************
services:
  mosquitto:
    image: eclipse-mosquitto
    hostname: mosquitto   
    container_name: mosquitto
    ports:
#      - "1883:1883"
      - "8883:8883"
      - "9001:9001"

    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mosquitto/data:/mosquitto/data:rw
#      - ./mosquitto/config:/mosquitto/config
#      - ./mosquitto/etc:/etc/mosquitto:ro
#      - ./mosquitto/auth-plugin.conf:/etc/mosquitto.d/auth-plugin.conf
      - ./mosquitto/log:/mosquitto/log
#      - ./mosquitto/lib/:/var/lib/mosquitto:rw
   
    restart: always
    networks:
      iot:
        aliases:
          - mosquitto
# *************** node-red ****************
  node-red:
    #build: ./node-red
    image: nodered/node-red
    restart: always
    hostname: node-red
    container_name: mynodered
    user: "0"
    ports:
      - "1880:1880"
    links:
      - mosquitto:broker
      - zookeeper:zookeeper
    environment:
      - TZ=Europe/Brussels
      
    depends_on:
      - mosquitto
    volumes:
       - ./node-red/data:/data
 #      - ./node-red/runtime:/root/.node-red
    networks:
      iot:
        aliases:
          - node-red
  
  zookeeper:
    container_name: zookeeper
    image: zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1
    networks:
      iot:
        aliases:
          - zookeeper
          
  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.1.201
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    
    networks:
      iot:
        aliases:
          - kafka   
    volumes:
      - ./kafka/logs:/tmp/kafka-logs
      - ./kafka/data:/var/lib/kafka/data
# ******** kafka manager *********
  kafka-manager:
    image: dockerkafka/kafka-manager:latest
    container_name: kafka-manager
    hostname: kafka-manager
    restart: always
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: letmein
      KM_ARGS: -Djava.net.preferIPv4Stack=true
    ports:
      - "9999:9000"
    links:
      - zookeeper:zookeeper
      
    volumes:
      - ./kafka-manager/conf:/opt/kafka-manager-1.2.7/conf
    networks:
      iot:
        aliases:
          - kafka-manager

 
# ****** druid config

  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
    networks:
      iot:
        aliases:
          - postgress    

  coordinator:
    image: apache/druid:0.17.0
    container_name: coordinator
    volumes:
      - storage:/opt/data
      - coordinator_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - environment
    networks:
      iot:
        aliases:
          - coordinator

  broker:
    image: apache/druid:0.17.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - environment
    networks:
      iot:
        aliases:
          - broker

  historical:
    image: apache/druid:0.17.0
    container_name: historical
    volumes:
      - storage:/opt/data
      - historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - environment
    networks:
      iot:
        aliases:
          - historical

  middlemanager:
    image: apache/druid:0.17.0
    container_name: middlemanager
    volumes:
      - storage:/opt/data
      - middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
    command:
      - middleManager
    env_file:
      - environment
    networks:
      iot:
        aliases:
          - middlemanager
          
  router:
    image: apache/druid:0.17.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - environment
    networks:
      iot:
        aliases:
          - router
  #   ************ grafana ***********
  grafana:
    container_name: grafana
    hostname: grafana    
    image: grafana/grafana
    restart: always        
    ports:
      - "3000:3000"
    env_file:
      - ./grafana/env.grafana
    volumes:
#      - ./grafana/etc:/etc/grafana
#     sudo mkdir -p /volume1/docker/grafana/data; chown 472:472 /volume1/docker/grafana/data
      - ./grafana/data:/var/lib/grafana
      - ./grafana/grafana-plugins:/var/lib/grafana/plugins
#      - GF_SECURITY_ADMIN_PASSWORD=$PASSWORD
#   user: "472"
    user: "0"
    networks:
      iot:
        aliases:
          - grafana

  #   ************ turnilo ***********
  turnilo:
    container_name: turnilo
    hostname: turnilo    
    image: uchhatre/turnilo
    restart: always        
    ports:
      - "9090:9090"
    environment:
      - DRUID_BROKER_URL= http://192.168.1.201:8082
#    volumes : 
#      - ./turnilo/config:/etc/turnilo/config.yaml:rw
#      - ./turnilo/logs:/v
    networks:
      iot:
        aliases:
          - turnilo 

 


networks:
  iot:
    driver: bridge
